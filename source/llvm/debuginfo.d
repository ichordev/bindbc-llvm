/+
+            Copyright 2023 â€“ 2024 Aya Partridge
+ Distributed under the Boost Software License, Version 1.0.
+     (See accompanying file LICENSE_1_0.txt or copy at
+           http://www.boost.org/LICENSE_1_0.txt)
+/
module llvm.debuginfo;

import bindbc.llvm.config;
import bindbc.llvm.codegen;

import llvm.types;

alias LLVMDIFlags = int;
enum: LLVMDIFlags{
	LLVMDIFlagZero                   = 0,
	LLVMDIFlagPrivate                = 1,
	LLVMDIFlagProtected              = 2,
	LLVMDIFlagPublic                 = 3,
	LLVMDIFlagFwdDecl                = 1 << 2,
	LLVMDIFlagAppleBlock             = 1 << 3,
	LLVMDIFlagReservedBit4           = 1 << 4,
	LLVMDIFlagVirtual                = 1 << 5,
	LLVMDIFlagArtificial             = 1 << 6,
	LLVMDIFlagExplicit               = 1 << 7,
	LLVMDIFlagPrototyped             = 1 << 8,
	LLVMDIFlagObjcClassComplete      = 1 << 9,
	LLVMDIFlagObjectPointer          = 1 << 10,
	LLVMDIFlagVector                 = 1 << 11,
	LLVMDIFlagStaticMember           = 1 << 12,
	LLVMDIFlagLValueReference        = 1 << 13,
	LLVMDIFlagRValueReference        = 1 << 14,
	LLVMDIFlagReserved               = 1 << 15,
	LLVMDIFlagSingleInheritance      = 1 << 16,
	LLVMDIFlagMultipleInheritance    = 2 << 16,
	LLVMDIFlagVirtualInheritance     = 3 << 16,
	LLVMDIFlagIntroducedVirtual      = 1 << 18,
	LLVMDIFlagBitField               = 1 << 19,
	LLVMDIFlagNoReturn               = 1 << 20,
	LLVMDIFlagTypePassByValue        = 1 << 22,
	LLVMDIFlagTypePassByReference    = 1 << 23,
	LLVMDIFlagEnumClass              = 1 << 24,
	
	LLVMDIFlagThunk                  = 1 << 25,
	LLVMDIFlagNonTrivial             = 1 << 26,
	LLVMDIFlagBigEndian              = 1 << 27,
	LLVMDIFlagLittleEndian           = 1 << 28,
	LLVMDIFlagIndirectVirtualBase    = (1 << 2) | (1 << 5),
	LLVMDIFlagAccessibility          = LLVMDIFlagPrivate | LLVMDIFlagProtected | LLVMDIFlagPublic,
	LLVMDIFlagPtrToMemberRep         = LLVMDIFlagSingleInheritance | LLVMDIFlagMultipleInheritance | LLVMDIFlagVirtualInheritance,
}

alias LLVMDWARFSourceLanguage = int;
enum: LLVMDWARFSourceLanguage{
	LLVMDWARFSourceLanguageC89,
	LLVMDWARFSourceLanguageC,
	LLVMDWARFSourceLanguageAda83,
	LLVMDWARFSourceLanguageC_plus_plus,
	LLVMDWARFSourceLanguageCobol74,
	LLVMDWARFSourceLanguageCobol85,
	LLVMDWARFSourceLanguageFortran77,
	LLVMDWARFSourceLanguageFortran90,
	LLVMDWARFSourceLanguagePascal83,
	LLVMDWARFSourceLanguageModula2,
	
	LLVMDWARFSourceLanguageJava,
	LLVMDWARFSourceLanguageC99,
	LLVMDWARFSourceLanguageAda95,
	LLVMDWARFSourceLanguageFortran95,
	LLVMDWARFSourceLanguagePLI,
	LLVMDWARFSourceLanguageObjC,
	LLVMDWARFSourceLanguageObjC_plus_plus,
	LLVMDWARFSourceLanguageUPC,
	LLVMDWARFSourceLanguageD,
	
	LLVMDWARFSourceLanguagePython,
	
	LLVMDWARFSourceLanguageOpenCL,
	LLVMDWARFSourceLanguageGo,
	LLVMDWARFSourceLanguageModula3,
	LLVMDWARFSourceLanguageHaskell,
	LLVMDWARFSourceLanguageC_plus_plus_03,
	LLVMDWARFSourceLanguageC_plus_plus_11,
	LLVMDWARFSourceLanguageOCaml,
	LLVMDWARFSourceLanguageRust,
	LLVMDWARFSourceLanguageC11,
	LLVMDWARFSourceLanguageSwift,
	LLVMDWARFSourceLanguageJulia,
	LLVMDWARFSourceLanguageDylan,
	LLVMDWARFSourceLanguageC_plus_plus_14,
	LLVMDWARFSourceLanguageFortran03,
	LLVMDWARFSourceLanguageFortran08,
	LLVMDWARFSourceLanguageRenderScript,
	LLVMDWARFSourceLanguageBLISS,
	LLVMDWARFSourceLanguageKotlin,
	LLVMDWARFSourceLanguageZig,
	LLVMDWARFSourceLanguageCrystal,
	LLVMDWARFSourceLanguageC_plus_plus_17,
	LLVMDWARFSourceLanguageC_plus_plus_20,
	LLVMDWARFSourceLanguageC17,
	LLVMDWARFSourceLanguageFortran18,
	LLVMDWARFSourceLanguageAda2005,
	LLVMDWARFSourceLanguageAda2012,
	
	LLVMDWARFSourceLanguageMips_Assembler,
	LLVMDWARFSourceLanguageGOOGLE_RenderScript,
	LLVMDWARFSourceLanguageBORLAND_Delphi
}

alias LLVMDWARFEmissionKind = int;
enum: LLVMDWARFEmissionKind{
	LLVMDWARFEmissionNone = 0,
	LLVMDWARFEmissionFull,
	LLVMDWARFEmissionLineTablesOnly,
}

alias LLVMMetadataKind = uint;
enum: LLVMMetadataKind{
	LLVMMDStringMetadataKind,
	LLVMConstantAsMetadataMetadataKind,
	LLVMLocalAsMetadataMetadataKind,
	LLVMDistinctMDOperandPlaceholderMetadataKind,
	LLVMMDTupleMetadataKind,
	LLVMDILocationMetadataKind,
	LLVMDIExpressionMetadataKind,
	LLVMDIGlobalVariableExpressionMetadataKind,
	LLVMGenericDINodeMetadataKind,
	LLVMDISubrangeMetadataKind,
	LLVMDIEnumeratorMetadataKind,
	LLVMDIBasicTypeMetadataKind,
	LLVMDIDerivedTypeMetadataKind,
	LLVMDICompositeTypeMetadataKind,
	LLVMDISubroutineTypeMetadataKind,
	LLVMDIFileMetadataKind,
	LLVMDICompileUnitMetadataKind,
	LLVMDISubprogramMetadataKind,
	LLVMDILexicalBlockMetadataKind,
	LLVMDILexicalBlockFileMetadataKind,
	LLVMDINamespaceMetadataKind,
	LLVMDIModuleMetadataKind,
	LLVMDITemplateTypeParameterMetadataKind,
	LLVMDITemplateValueParameterMetadataKind,
	LLVMDIGlobalVariableMetadataKind,
	LLVMDILocalVariableMetadataKind,
	LLVMDILabelMetadataKind,
	LLVMDIObjCPropertyMetadataKind,
	LLVMDIImportedEntityMetadataKind,
	LLVMDIMacroMetadataKind,
	LLVMDIMacroFileMetadataKind,
	LLVMDICommonBlockMetadataKind,
	LLVMDIStringTypeMetadataKind,
	LLVMDIGenericSubrangeMetadataKind,
	LLVMDIArgListMetadataKind,
	LLVMDIAssignIDMetadataKind,
}

alias LLVMDWARFTypeEncoding = uint;

alias LLVMDWARFMacinfoRecordType = int;
enum: LLVMDWARFMacinfoRecordType{
	LLVMDWARFMacinfoRecordTypeDefine     = 0x01,
	LLVMDWARFMacinfoRecordTypeMacro      = 0x02,
	LLVMDWARFMacinfoRecordTypeStartFile  = 0x03,
	LLVMDWARFMacinfoRecordTypeEndFile    = 0x04,
	LLVMDWARFMacinfoRecordTypeVendorExt  = 0xFF,
}

mixin(joinFnBinds((){
	FnBind[] ret = [
		{q{uint}, q{LLVMDebugMetadataVersion}, q{}},
		{q{uint}, q{LLVMGetModuleDebugMetadataVersion}, q{LLVMModuleRef module_}},
		{q{LLVMBool}, q{LLVMStripModuleDebugInfo}, q{LLVMModuleRef module_}},
		{q{LLVMDIBuilderRef}, q{LLVMCreateDIBuilderDisallowUnresolved}, q{LLVMModuleRef m}},
		{q{LLVMDIBuilderRef}, q{LLVMCreateDIBuilder}, q{LLVMModuleRef m}},
		{q{void}, q{LLVMDisposeDIBuilder}, q{LLVMDIBuilderRef builder}},
		{q{void}, q{LLVMDIBuilderFinalize}, q{LLVMDIBuilderRef builder}},
		{q{void}, q{LLVMDIBuilderFinalizeSubprogram}, q{LLVMDIBuilderRef builder, LLVMMetadataRef subProgram}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateCompileUnit}, q{LLVMDIBuilderRef builder, LLVMDWARFSourceLanguage lang, LLVMMetadataRef fileRef, const(char)* producer, size_t producerLen, LLVMBool isOptimised, const(char)* flags, size_t flagsLen, uint runtimeVer, const(char)* splitName, size_t splitNameLen, LLVMDWARFEmissionKind kind, uint dwoId, LLVMBool splitDebugInlining, LLVMBool debugInfoForProfiling, const(char)* sysRoot, size_t sysRootLen, const(char)* sdk, size_t sdkLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateFile}, q{LLVMDIBuilderRef builder, const(char)* filename, size_t filenameLen, const(char)* directory, size_t directoryLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateModule}, q{LLVMDIBuilderRef builder, LLVMMetadataRef parentScope, const(char)* name, size_t nameLen, const(char)* configMacros, size_t configMacrosLen, const(char)* includePath, size_t includePathLen, const(char)* apiNotesFile, size_t apiNotesFileLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateNameSpace}, q{LLVMDIBuilderRef builder, LLVMMetadataRef parentScope, const(char)* name, size_t nameLen, LLVMBool exportSymbols}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateFunction}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, const(char)* linkageName, size_t linkageNameLen, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef ty, LLVMBool isLocalToUnit, LLVMBool isDefinition, uint scopeLine, LLVMDIFlags flags, LLVMBool isOptimized}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateLexicalBlock}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef file, uint line, uint column}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateLexicalBlockFile}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef file, uint discriminator}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateImportedModuleFromNamespace}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef ns, LLVMMetadataRef file, uint line}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateImportedModuleFromAlias}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef importedEntity, LLVMMetadataRef file, uint line, LLVMMetadataRef* elements, uint numElements}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateImportedModuleFromModule}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef m, LLVMMetadataRef file, uint line, LLVMMetadataRef* elements, uint numElements}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateImportedDeclaration}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, LLVMMetadataRef decl, LLVMMetadataRef file, uint line, const(char)* name, size_t nameLen, LLVMMetadataRef* elements, uint numElements}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateDebugLocation}, q{LLVMContextRef ctx, uint line, uint column, LLVMMetadataRef scope_, LLVMMetadataRef inlinedAt}},
		{q{uint}, q{LLVMDILocationGetLine}, q{LLVMMetadataRef location}},
		{q{uint}, q{LLVMDILocationGetColumn}, q{LLVMMetadataRef location}},
		{q{LLVMMetadataRef}, q{LLVMDILocationGetScope}, q{LLVMMetadataRef location}},
		{q{LLVMMetadataRef}, q{LLVMDILocationGetInlinedAt}, q{LLVMMetadataRef location}},
		{q{LLVMMetadataRef}, q{LLVMDIScopeGetFile}, q{LLVMMetadataRef scope_}},
		{q{const(char)*}, q{LLVMDIFileGetDirectory}, q{LLVMMetadataRef file, uint* len}},
		{q{const(char)*}, q{LLVMDIFileGetFilename}, q{LLVMMetadataRef file, uint* len}},
		{q{const(char)*}, q{LLVMDIFileGetSource}, q{LLVMMetadataRef file, uint* len}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderGetOrCreateTypeArray}, q{LLVMDIBuilderRef builder, LLVMMetadataRef* data, size_t numElements}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateSubroutineType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef file, LLVMMetadataRef* parameterTypes, uint numParameterTypes, LLVMDIFlags flags}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateMacro}, q{LLVMDIBuilderRef builder, LLVMMetadataRef parentMacroFile, uint line, LLVMDWARFMacinfoRecordType recordType, const(char)* name, size_t nameLen, const(char)* value, size_t valueLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateTempMacroFile}, q{LLVMDIBuilderRef builder, LLVMMetadataRef parentMacroFile, uint line, LLVMMetadataRef file}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateEnumerator}, q{LLVMDIBuilderRef builder, const(char)* name, size_t nameLen, long value, LLVMBool isUnsigned}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateEnumerationType}, q{ LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, ulong sizeInBits, uint alignInBits, LLVMMetadataRef* elements, uint numElements, LLVMMetadataRef classTy}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateUnionType}, q{ LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, ulong sizeInBits, uint alignInBits, LLVMDIFlags flags, LLVMMetadataRef* elements, uint numElements, uint runTimeLang, const(char)* uniqueId, size_t uniqueIdLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateArrayType}, q{LLVMDIBuilderRef builder, ulong size, uint alignInBits, LLVMMetadataRef ty, LLVMMetadataRef* subscripts, uint numSubscripts}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateVectorType}, q{LLVMDIBuilderRef builder, ulong size, uint alignInBits, LLVMMetadataRef ty, LLVMMetadataRef* subscripts, uint numSubscripts}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateUnspecifiedType}, q{LLVMDIBuilderRef builder, const(char)* name, size_t nameLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateBasicType}, q{LLVMDIBuilderRef builder, const(char)* name, size_t nameLen, ulong sizeInBits, LLVMDWARFTypeEncoding encoding, LLVMDIFlags flags}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreatePointerType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef pointeeTy, ulong sizeInBits, uint alignInBits, uint addressSpace, const(char)* name, size_t nameLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateStructType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, ulong sizeInBits, uint alignInBits, LLVMDIFlags flags, LLVMMetadataRef derivedFrom, LLVMMetadataRef* elements, uint numElements, uint runTimeLang, LLVMMetadataRef vtableHolder, const(char)* uniqueId, size_t uniqueIdLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateMemberType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNo, ulong sizeInBits, uint alignInBits, ulong offsetInBits, LLVMDIFlags flags, LLVMMetadataRef ty}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateStaticMemberType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, LLVMMetadataRef type, LLVMDIFlags flags, LLVMValueRef constantVal, uint alignInBits}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateMemberPointerType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef pointeeType, LLVMMetadataRef classType, ulong sizeInBits, uint alignInBits, LLVMDIFlags flags}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateObjCIVar}, q{LLVMDIBuilderRef builder, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNo, ulong sizeInBits, uint alignInBits, ulong offsetInBits, LLVMDIFlags flags, LLVMMetadataRef ty, LLVMMetadataRef propertyNode}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateObjCProperty}, q{LLVMDIBuilderRef builder, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNo, const(char)* getterName, size_t getterNameLen, const(char)* setterName, size_t setterNameLen, uint propertyAttributes, LLVMMetadataRef ty}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateObjectPointerType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef type}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateQualifiedType}, q{LLVMDIBuilderRef builder, uint tag, LLVMMetadataRef type}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateReferenceType}, q{LLVMDIBuilderRef builder, uint tag, LLVMMetadataRef type}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateNullPtrType}, q{LLVMDIBuilderRef builder}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateTypedef}, q{LLVMDIBuilderRef builder, LLVMMetadataRef type, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef scope_, uint alignInBits}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateInheritance}, q{LLVMDIBuilderRef builder, LLVMMetadataRef ty, LLVMMetadataRef baseTy, ulong baseOffset, uint vbPtrOffset, LLVMDIFlags flags}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateForwardDecl}, q{LLVMDIBuilderRef builder, uint tag, const(char)* name, size_t nameLen, LLVMMetadataRef scope_, LLVMMetadataRef file, uint line, uint runtimeLang, ulong sizeInBits, uint alignInBits, const(char)* uniqueIdentifier, size_t uniqueIdentifierLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateReplaceableCompositeType}, q{LLVMDIBuilderRef builder, uint tag, const(char)* name, size_t nameLen, LLVMMetadataRef scope_, LLVMMetadataRef file, uint line, uint runtimeLang, ulong sizeInBits, uint alignInBits, LLVMDIFlags flags, const(char)* uniqueIdentifier, size_t uniqueIdentifierLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateBitFieldMemberType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, ulong sizeInBits, ulong offsetInBits, ulong storageOffsetInBits, LLVMDIFlags flags, LLVMMetadataRef type}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateClassType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNumber, ulong sizeInBits, uint alignInBits, ulong offsetInBits, LLVMDIFlags flags, LLVMMetadataRef derivedFrom, LLVMMetadataRef* elements, uint numElements, LLVMMetadataRef vtableHolder, LLVMMetadataRef templateParamsNode, const(char)* uniqueIdentifier, size_t uniqueIdentifierLen}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateArtificialType}, q{LLVMDIBuilderRef builder, LLVMMetadataRef type}},
		{q{const(char)*}, q{LLVMDITypeGetName}, q{LLVMMetadataRef dtype, size_t* length}},
		{q{ulong}, q{LLVMDITypeGetSizeInBits}, q{LLVMMetadataRef dtype}},
		{q{ulong}, q{LLVMDITypeGetOffsetInBits}, q{LLVMMetadataRef dtype}},
		{q{uint}, q{LLVMDITypeGetAlignInBits}, q{LLVMMetadataRef dtype}},
		{q{uint}, q{LLVMDITypeGetLine}, q{LLVMMetadataRef dtype}},
		{q{LLVMDIFlags}, q{LLVMDITypeGetFlags}, q{LLVMMetadataRef dtype}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderGetOrCreateSubrange}, q{LLVMDIBuilderRef builder, long lowerBound, long count}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderGetOrCreateArray}, q{LLVMDIBuilderRef builder, LLVMMetadataRef* data, size_t numElements}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateExpression}, q{LLVMDIBuilderRef builder, ulong* addr, size_t length}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateConstantValueExpression}, q{LLVMDIBuilderRef builder, ulong value}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateGlobalVariableExpression}, q{ LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, const(char)* linkage, size_t linkLen, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef ty, LLVMBool localToUnit, LLVMMetadataRef expr, LLVMMetadataRef decl, uint alignInBits}},
		{q{LLVMMetadataRef}, q{LLVMDIGlobalVariableExpressionGetVariable}, q{LLVMMetadataRef gve}},
		{q{LLVMMetadataRef}, q{LLVMDIGlobalVariableExpressionGetExpression}, q{LLVMMetadataRef gve}},
		{q{LLVMMetadataRef}, q{LLVMDIVariableGetFile}, q{LLVMMetadataRef var}},
		{q{LLVMMetadataRef}, q{LLVMDIVariableGetScope}, q{LLVMMetadataRef var}},
		{q{uint}, q{LLVMDIVariableGetLine}, q{LLVMMetadataRef var}},
		{q{LLVMMetadataRef}, q{LLVMTemporaryMDNode}, q{LLVMContextRef ctx, LLVMMetadataRef* data, size_t numElements}},
		{q{void}, q{LLVMDisposeTemporaryMDNode}, q{LLVMMetadataRef tempNode}},
		{q{void}, q{LLVMMetadataReplaceAllUsesWith}, q{LLVMMetadataRef tempTargetMetadata, LLVMMetadataRef replacement}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateTempGlobalVariableFwdDecl}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, const(char)* linkage, size_t lnkLen, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef ty, LLVMBool localToUnit, LLVMMetadataRef decl, uint alignInBits}},
		{q{LLVMValueRef}, q{LLVMDIBuilderInsertDeclareBefore}, q{LLVMDIBuilderRef builder, LLVMValueRef storage, LLVMMetadataRef varInfo, LLVMMetadataRef expr, LLVMMetadataRef debugLoc, LLVMValueRef instr}},
		{q{LLVMValueRef}, q{LLVMDIBuilderInsertDeclareAtEnd}, q{LLVMDIBuilderRef builder, LLVMValueRef storage, LLVMMetadataRef varInfo, LLVMMetadataRef expr, LLVMMetadataRef debugLoc, LLVMBasicBlockRef block}},
		{q{LLVMValueRef}, q{LLVMDIBuilderInsertDbgValueBefore}, q{LLVMDIBuilderRef builder, LLVMValueRef val, LLVMMetadataRef varInfo, LLVMMetadataRef expr, LLVMMetadataRef debugLoc, LLVMValueRef instr}},
		{q{LLVMValueRef}, q{LLVMDIBuilderInsertDbgValueAtEnd}, q{LLVMDIBuilderRef builder, LLVMValueRef val, LLVMMetadataRef varInfo, LLVMMetadataRef expr, LLVMMetadataRef debugLoc, LLVMBasicBlockRef block}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateAutoVariable}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef ty, LLVMBool alwaysPreserve, LLVMDIFlags flags, uint alignInBits}},
		{q{LLVMMetadataRef}, q{LLVMDIBuilderCreateParameterVariable}, q{LLVMDIBuilderRef builder, LLVMMetadataRef scope_, const(char)* name, size_t nameLen, uint argNo, LLVMMetadataRef file, uint lineNo, LLVMMetadataRef ty, LLVMBool alwaysPreserve, LLVMDIFlags flags}},
		{q{LLVMMetadataRef}, q{LLVMGetSubprogram}, q{LLVMValueRef func}},
		{q{void}, q{LLVMSetSubprogram}, q{LLVMValueRef func, LLVMMetadataRef sp}},
		{q{uint}, q{LLVMDISubprogramGetLine}, q{LLVMMetadataRef subprogram}},
		{q{LLVMMetadataRef}, q{LLVMInstructionGetDebugLoc}, q{LLVMValueRef inst}},
		{q{void}, q{LLVMInstructionSetDebugLoc}, q{LLVMValueRef inst, LLVMMetadataRef loc}},
		{q{LLVMMetadataKind}, q{LLVMGetMetadataKind}, q{LLVMMetadataRef metadata}},
	];
	return ret;
}()));
