/+
+                Copyright 2023 Aya Partridge
+ Distributed under the Boost Software License, Version 1.0.
+     (See accompanying file LICENSE_1_0.txt or copy at
+           http://www.boost.org/LICENSE_1_0.txt)
+/
module llvm.core;

import bindbc.llvm.config;
import bindbc.llvm.codegen;

import llvm.errorhandling;
import llvm.types;

alias LLVMOpcode = int;
enum: LLVMOpcode{
	LLVMRet             = 1,
	LLVMBr              = 2,
	LLVMSwitch          = 3,
	LLVMIndirectBr      = 4,
	LLVMInvoke          = 5,
	
	LLVMUnreachable     = 7,
	LLVMCallBr          = 67,
	
	LLVMFNeg            = 66,
	
	LLVMAdd             = 8,
	LLVMFAdd            = 9,
	LLVMSub             = 10,
	LLVMFSub            = 11,
	LLVMMul             = 12,
	LLVMFMul            = 13,
	LLVMUDiv            = 14,
	LLVMSDiv            = 15,
	LLVMFDiv            = 16,
	LLVMURem            = 17,
	LLVMSRem            = 18,
	LLVMFRem            = 19,
	
	LLVMShl             = 20,
	LLVMLShr            = 21,
	LLVMAShr            = 22,
	LLVMAnd             = 23,
	LLVMOr              = 24,
	LLVMXor             = 25,
	
	LLVMAlloca          = 26,
	LLVMLoad            = 27,
	LLVMStore           = 28,
	LLVMGetElementPtr   = 29,
	
	LLVMTrunc           = 30,
	LLVMZExt            = 31,
	LLVMSExt            = 32,
	LLVMFPToUI          = 33,
	LLVMFPToSI          = 34,
	LLVMUIToFP          = 35,
	LLVMSIToFP          = 36,
	LLVMFPTrunc         = 37,
	LLVMFPExt           = 38,
	LLVMPtrToInt        = 39,
	LLVMIntToPtr        = 40,
	LLVMBitCast         = 41,
	LLVMAddrSpaceCast   = 60,
	
	LLVMICmp            = 42,
	LLVMFCmp            = 43,
	LLVMPHI             = 44,
	LLVMCall            = 45,
	LLVMSelect          = 46,
	LLVMUserOp1         = 47,
	LLVMUserOp2         = 48,
	LLVMVAArg           = 49,
	LLVMExtractElement  = 50,
	LLVMInsertElement   = 51,
	LLVMShuffleVector   = 52,
	LLVMExtractValue    = 53,
	LLVMInsertValue     = 54,
	LLVMFreeze          = 68,
	
	LLVMFence           = 55,
	LLVMAtomicCmpXchg   = 56,
	LLVMAtomicRMW       = 57,
	
	LLVMResume          = 58,
	LLVMLandingPad      = 59,
	LLVMCleanupRet      = 61,
	LLVMCatchRet        = 62,
	LLVMCatchPad        = 63,
	LLVMCleanupPad      = 64,
	LLVMCatchSwitch     = 65,
}

alias LLVMTypeKind = int;
enum: LLVMTypeKind{
	LLVMVoidTypeKind,
	LLVMHalfTypeKind,
	LLVMFloatTypeKind,
	LLVMDoubleTypeKind,
	LLVMX86_FP80TypeKind,
	LLVMFP128TypeKind,
	LLVMPPC_FP128TypeKind,
	LLVMLabelTypeKind,
	LLVMIntegerTypeKind,
	LLVMFunctionTypeKind,
	LLVMStructTypeKind,
	LLVMArrayTypeKind,
	LLVMPointerTypeKind,
	LLVMVectorTypeKind,
	LLVMMetadataTypeKind,
	LLVMX86_MMXTypeKind,
	LLVMTokenTypeKind,
	LLVMScalableVectorTypeKind,
	LLVMBFloatTypeKind,
	LLVMX86_AMXTypeKind,
	LLVMTargetExtTypeKind,
}

alias LLVMLinkage = int;
enum: LLVMLinkage{
	LLVMExternalLinkage,
	LLVMAvailableExternallyLinkage,
	LLVMLinkOnceAnyLinkage,
	LLVMLinkOnceODRLinkage,
	LLVMLinkOnceODRAutoHideLinkage,
	LLVMWeakAnyLinkage,
	LLVMWeakODRLinkage,
	LLVMAppendingLinkage,
	LLVMInternalLinkage,
	LLVMPrivateLinkage,
	LLVMDLLImportLinkage,
	LLVMDLLExportLinkage,
	LLVMExternalWeakLinkage,
	LLVMGhostLinkage,
	LLVMCommonLinkage,
	LLVMLinkerPrivateLinkage,
	LLVMLinkerPrivateWeakLinkage,
}

alias LLVMVisibility = int;
enum: LLVMVisibility{
	LLVMDefaultVisibility,
	LLVMHiddenVisibility,
	LLVMProtectedVisibility,
}

alias LLVMUnnamedAddr = int;
enum: LLVMUnnamedAddr{
	LLVMNoUnnamedAddr,
	LLVMLocalUnnamedAddr,
	LLVMGlobalUnnamedAddr,
}

alias LLVMDLLStorageClass = int;
enum: LLVMDLLStorageClass{
	LLVMDefaultStorageClass    = 0,
	LLVMDLLImportStorageClass  = 1,
	LLVMDLLExportStorageClass  = 2,
}

alias LLVMCallConv = int;
enum: LLVMCallConv{
	LLVMCCallConv              = 0,
	LLVMFastCallConv           = 8,
	LLVMColdCallConv           = 9,
	LLVMGHCCallConv            = 10,
	LLVMHiPECallConv           = 11,
	LLVMWebKitJSCallConv       = 12,
	LLVMAnyRegCallConv         = 13,
	LLVMPreserveMostCallConv   = 14,
	LLVMPreserveAllCallConv    = 15,
	LLVMSwiftCallConv          = 16,
	LLVMCXXFASTTLSCallConv     = 17,
	LLVMX86StdcallCallConv     = 64,
	LLVMX86FastcallCallConv    = 65,
	LLVMARMAPCSCallConv        = 66,
	LLVMARMAAPCSCallConv       = 67,
	LLVMARMAAPCSVFPCallConv    = 68,
	LLVMMSP430INTRCallConv     = 69,
	LLVMX86ThisCallCallConv    = 70,
	LLVMPTXKernelCallConv      = 71,
	LLVMPTXDeviceCallConv      = 72,
	LLVMSPIRFUNCCallConv       = 75,
	LLVMSPIRKERNELCallConv     = 76,
	LLVMIntelOCLBICallConv     = 77,
	LLVMX8664SysVCallConv      = 78,
	LLVMWin64CallConv          = 79,
	LLVMX86VectorCallCallConv  = 80,
	LLVMHHVMCallConv           = 81,
	LLVMHHVMCCallConv          = 82,
	LLVMX86INTRCallConv        = 83,
	LLVMAVRINTRCallConv        = 84,
	LLVMAVRSIGNALCallConv      = 85,
	LLVMAVRBUILTINCallConv     = 86,
	LLVMAMDGPUVSCallConv       = 87,
	LLVMAMDGPUGSCallConv       = 88,
	LLVMAMDGPUPSCallConv       = 89,
	LLVMAMDGPUCSCallConv       = 90,
	LLVMAMDGPUKERNELCallConv   = 91,
	LLVMX86RegCallCallConv     = 92,
	LLVMAMDGPUHSCallConv       = 93,
	LLVMMSP430BUILTINCallConv  = 94,
	LLVMAMDGPULSCallConv       = 95,
	LLVMAMDGPUESCallConv       = 96,
}

alias LLVMValueKind = int;
enum: LLVMValueKind{
	LLVMArgumentValueKind,
	LLVMBasicBlockValueKind,
	LLVMMemoryUseValueKind,
	LLVMMemoryDefValueKind,
	LLVMMemoryPhiValueKind,
	
	LLVMFunctionValueKind,
	LLVMGlobalAliasValueKind,
	LLVMGlobalIFuncValueKind,
	LLVMGlobalVariableValueKind,
	LLVMBlockAddressValueKind,
	LLVMConstantExprValueKind,
	LLVMConstantArrayValueKind,
	LLVMConstantStructValueKind,
	LLVMConstantVectorValueKind,
	
	LLVMUndefValueValueKind,
	LLVMConstantAggregateZeroValueKind,
	LLVMConstantDataArrayValueKind,
	LLVMConstantDataVectorValueKind,
	LLVMConstantIntValueKind,
	LLVMConstantFPValueKind,
	LLVMConstantPointerNullValueKind,
	LLVMConstantTokenNoneValueKind,
	
	LLVMMetadataAsValueValueKind,
	LLVMInlineAsmValueKind,
	
	LLVMInstructionValueKind,
	LLVMPoisonValueValueKind,
	LLVMConstantTargetNoneValueKind,
}

alias LLVMIntPredicate = int;
enum: LLVMIntPredicate{
	LLVMIntEQ = 32,
	LLVMIntNE,
	LLVMIntUGT,
	LLVMIntUGE,
	LLVMIntULT,
	LLVMIntULE,
	LLVMIntSGT,
	LLVMIntSGE,
	LLVMIntSLT,
	LLVMIntSLE,
}

alias LLVMRealPredicate = int;
enum: LLVMRealPredicate{
	LLVMRealPredicateFalse,
	LLVMRealOEQ,
	LLVMRealOGT,
	LLVMRealOGE,
	LLVMRealOLT,
	LLVMRealOLE,
	LLVMRealONE,
	LLVMRealORD,
	LLVMRealUNO,
	LLVMRealUEQ,
	LLVMRealUGT,
	LLVMRealUGE,
	LLVMRealULT,
	LLVMRealULE,
	LLVMRealUNE,
	LLVMRealPredicateTrue,
}

alias LLVMLandingPadClauseTy = int;
enum: LLVMLandingPadClauseTy{
	LLVMLandingPadCatch,
	LLVMLandingPadFilter
}

alias LLVMThreadLocalMode = int;
enum: LLVMThreadLocalMode{
	LLVMNotThreadLocal = 0,
	LLVMGeneralDynamicTLSModel,
	LLVMLocalDynamicTLSModel,
	LLVMInitialExecTLSModel,
	LLVMLocalExecTLSModel,
}

alias LLVMAtomicOrdering = int;
enum: LLVMAtomicOrdering{
	LLVMAtomicOrderingNotAtomic               = 0,
	LLVMAtomicOrderingUnordered               = 1,
	LLVMAtomicOrderingMonotonic               = 2,
	LLVMAtomicOrderingAcquire                 = 4,
	LLVMAtomicOrderingRelease                 = 5,
	LLVMAtomicOrderingAcquireRelease          = 6,
	LLVMAtomicOrderingSequentiallyConsistent  = 7
}

alias LLVMAtomicRMWBinOp = int;
enum: LLVMAtomicRMWBinOp{
	LLVMAtomicRMWBinOpXchg,
	LLVMAtomicRMWBinOpAdd,
	LLVMAtomicRMWBinOpSub,
	LLVMAtomicRMWBinOpAnd,
	LLVMAtomicRMWBinOpNand,
	LLVMAtomicRMWBinOpOr,
	LLVMAtomicRMWBinOpXor,
	LLVMAtomicRMWBinOpMax,
	LLVMAtomicRMWBinOpMin,
	LLVMAtomicRMWBinOpUMax,
	LLVMAtomicRMWBinOpUMin,
	LLVMAtomicRMWBinOpFAdd,
	LLVMAtomicRMWBinOpFSub,
	LLVMAtomicRMWBinOpFMax,
	LLVMAtomicRMWBinOpFMin,
}

alias LLVMDiagnosticSeverity = int;
enum: LLVMDiagnosticSeverity{
	LLVMDSError,
	LLVMDSWarning,
	LLVMDSRemark,
	LLVMDSNote,
}

alias LLVMInlineAsmDialect = int;
enum: LLVMInlineAsmDialect{
	LLVMInlineAsmDialectATT,
	LLVMInlineAsmDialectIntel,
}

alias LLVMModuleFlagBehavior = int;
enum: LLVMModuleFlagBehavior{
	LLVMModuleFlagBehaviorError,
	LLVMModuleFlagBehaviorWarning,
	LLVMModuleFlagBehaviorRequire,
	LLVMModuleFlagBehaviorOverride,
	LLVMModuleFlagBehaviorAppend,
	LLVMModuleFlagBehaviorAppendUnique,
}

alias LLVMAttributeIndex = uint;
enum: LLVMAttributeIndex{
	LLVMAttributeReturnIndex = 0U,
	LLVMAttributeFunctionIndex = -1,
}

extern(C) nothrow{
	alias LLVMDiagnosticHandler = void function(LLVMDiagnosticInfoRef, void*);
	alias LLVMYieldCallback = void function(LLVMContextRef, void*);
}

mixin(joinFnBinds((){
	FnBind[] ret = [
		{q{void}, q{LLVMInitializeCore}, q{LLVMPassRegistryRef r}, aliases: [q{LLVMInitialiseCore}]},
		{q{void}, q{LLVMShutdown}, q{}},
		{q{void}, q{LLVMGetVersion}, q{uint* major, uint* minor, uint* patch}},
		{q{char*}, q{LLVMCreateMessage}, q{const(char)* message}},
		{q{void}, q{LLVMDisposeMessage}, q{char* message}},
		{q{LLVMContextRef}, q{LLVMContextCreate}, q{}},
		{q{LLVMContextRef}, q{LLVMGetGlobalContext}, q{}},
		{q{void}, q{LLVMContextSetDiagnosticHandler}, q{LLVMContextRef c, LLVMDiagnosticHandler handler, void* diagnosticContext}},
		{q{LLVMDiagnosticHandler}, q{LLVMContextGetDiagnosticHandler}, q{LLVMContextRef c}},
		{q{void*}, q{LLVMContextGetDiagnosticContext}, q{LLVMContextRef c}},
		{q{void}, q{LLVMContextSetYieldCallback}, q{LLVMContextRef c, LLVMYieldCallback callback, void* opaqueHandle}},
		{q{LLVMBool}, q{LLVMContextShouldDiscardValueNames}, q{LLVMContextRef c}},
		{q{void}, q{LLVMContextSetDiscardValueNames}, q{LLVMContextRef c, LLVMBool discard}},
		{q{void}, q{LLVMContextSetOpaquePointers}, q{LLVMContextRef c, LLVMBool opaquePointers}},
		{q{void}, q{LLVMContextDispose}, q{LLVMContextRef c}},
		{q{char*}, q{LLVMGetDiagInfoDescription}, q{LLVMDiagnosticInfoRef di}},
		{q{LLVMDiagnosticSeverity}, q{LLVMGetDiagInfoSeverity}, q{LLVMDiagnosticInfoRef di}},
		{q{uint}, q{LLVMGetMDKindIDInContext}, q{LLVMContextRef c, const(char)* name, uint slen}},
		{q{uint}, q{LLVMGetMDKindID}, q{const(char)* name, uint slen}},
		{q{uint}, q{LLVMGetEnumAttributeKindForName}, q{const(char)* name, size_t slen}},
		{q{uint}, q{LLVMGetLastEnumAttributeKind}, q{}},
		{q{LLVMAttributeRef}, q{LLVMCreateEnumAttribute}, q{LLVMContextRef c, uint kindID, ulong val}},
		{q{uint}, q{LLVMGetEnumAttributeKind}, q{LLVMAttributeRef a}},
		{q{ulong}, q{LLVMGetEnumAttributeValue}, q{LLVMAttributeRef a}},
		{q{LLVMAttributeRef}, q{LLVMCreateTypeAttribute}, q{LLVMContextRef c, uint kindID, LLVMTypeRef typeRef}},
		{q{LLVMTypeRef}, q{LLVMGetTypeAttributeValue}, q{LLVMAttributeRef a}},
		{q{LLVMAttributeRef}, q{LLVMCreateStringAttribute}, q{LLVMContextRef c, const(char)* k, uint klength, const(char)* v, uint vLength}},
		{q{const(char)*}, q{LLVMGetStringAttributeKind}, q{LLVMAttributeRef a, uint* length}},
		{q{const(char)*}, q{LLVMGetStringAttributeValue}, q{LLVMAttributeRef a, uint* length}},
		{q{LLVMBool}, q{LLVMIsEnumAttribute}, q{LLVMAttributeRef a}},
		{q{LLVMBool}, q{LLVMIsStringAttribute}, q{LLVMAttributeRef a}},
		{q{LLVMBool}, q{LLVMIsTypeAttribute}, q{LLVMAttributeRef a}},
		{q{LLVMTypeRef}, q{LLVMGetTypeByName2}, q{LLVMContextRef c, const(char)* name}},
		{q{LLVMModuleRef}, q{LLVMModuleCreateWithName}, q{const(char)* moduleID}},
		{q{LLVMModuleRef}, q{LLVMModuleCreateWithNameInContext}, q{const(char)* moduleID, LLVMContextRef c}},
		{q{LLVMModuleRef}, q{LLVMCloneModule}, q{LLVMModuleRef m}},
		{q{void}, q{LLVMDisposeModule}, q{LLVMModuleRef m}},
		{q{const(char)*}, q{LLVMGetModuleIdentifier}, q{LLVMModuleRef m, size_t* len}},
		{q{void}, q{LLVMSetModuleIdentifier}, q{LLVMModuleRef m, const(char)* ident, size_t len}},
		{q{const(char)*}, q{LLVMGetSourceFileName}, q{LLVMModuleRef m, size_t* len}},
		{q{void}, q{LLVMSetSourceFileName}, q{LLVMModuleRef m, const(char)* name, size_t len}},
		{q{const(char)*}, q{LLVMGetDataLayoutStr}, q{LLVMModuleRef m}},
		{q{const(char)*}, q{LLVMGetDataLayout}, q{LLVMModuleRef m}},
		{q{void}, q{LLVMSetDataLayout}, q{LLVMModuleRef m, const(char)* dataLayoutStr}},
		{q{const(char)*}, q{LLVMGetTarget}, q{LLVMModuleRef m}},
		{q{void}, q{LLVMSetTarget}, q{LLVMModuleRef m, const(char)* triple}},
		{q{LLVMModuleFlagEntry*}, q{LLVMCopyModuleFlagsMetadata}, q{LLVMModuleRef m, size_t* len}},
		{q{void}, q{LLVMDisposeModuleFlagsMetadata}, q{LLVMModuleFlagEntry* entries}},
		{q{LLVMModuleFlagBehavior}, q{LLVMModuleFlagEntriesGetFlagBehavior}, q{LLVMModuleFlagEntry* entries, uint index}},
		{q{const(char)*}, q{LLVMModuleFlagEntriesGetKey}, q{LLVMModuleFlagEntry* entries, uint index, size_t* len}},
		{q{LLVMMetadataRef}, q{LLVMModuleFlagEntriesGetMetadata}, q{LLVMModuleFlagEntry* entries, uint index}},
		{q{LLVMMetadataRef}, q{LLVMGetModuleFlag}, q{LLVMModuleRef m, const(char)* key, size_t keyLen}},
		{q{void}, q{LLVMAddModuleFlag}, q{LLVMModuleRef m, LLVMModuleFlagBehavior behavior, const(char)* key, size_t keyLen, LLVMMetadataRef val}},
		{q{void}, q{LLVMDumpModule}, q{LLVMModuleRef m}},
		{q{LLVMBool}, q{LLVMPrintModuleToFile}, q{LLVMModuleRef m, const(char)* filename, char** errorMessage}},
		{q{char*}, q{LLVMPrintModuleToString}, q{LLVMModuleRef m}},
		{q{const(char)*}, q{LLVMGetModuleInlineAsm}, q{LLVMModuleRef m, size_t* len}},
		{q{void}, q{LLVMSetModuleInlineAsm2}, q{LLVMModuleRef m, const(char)* asm_, size_t len}},
		{q{void}, q{LLVMAppendModuleInlineAsm}, q{LLVMModuleRef m, const(char)* asm_, size_t len}},
		{q{LLVMValueRef}, q{LLVMGetInlineAsm}, q{LLVMTypeRef ty, char* asmString, size_t asmStringSize, char* constraints, size_t constraintsSize, LLVMBool hasSideEffects, LLVMBool isAlignStack, LLVMInlineAsmDialect dialect, LLVMBool canThrow}},
		{q{LLVMContextRef}, q{LLVMGetModuleContext}, q{LLVMModuleRef m}},
		{q{LLVMTypeRef}, q{LLVMGetTypeByName}, q{LLVMModuleRef m, const(char)* name}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetFirstNamedMetadata}, q{LLVMModuleRef m}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetLastNamedMetadata}, q{LLVMModuleRef m}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetNextNamedMetadata}, q{LLVMNamedMDNodeRef namedMDNode}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetPreviousNamedMetadata}, q{LLVMNamedMDNodeRef namedMDNode}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetNamedMetadata}, q{LLVMModuleRef m, const(char)* name, size_t nameLen}},
		{q{LLVMNamedMDNodeRef}, q{LLVMGetOrInsertNamedMetadata}, q{LLVMModuleRef m, const(char)* name, size_t nameLen}},
		{q{const(char)*}, q{LLVMGetNamedMetadataName}, q{LLVMNamedMDNodeRef namedMD, size_t* nameLen}},
		{q{uint}, q{LLVMGetNamedMetadataNumOperands}, q{LLVMModuleRef m, const(char)* name}},
		{q{void}, q{LLVMGetNamedMetadataOperands}, q{LLVMModuleRef m, const(char)* name, LLVMValueRef* dest}},
		{q{void}, q{LLVMAddNamedMetadataOperand}, q{LLVMModuleRef m, const(char)* name, LLVMValueRef val}},
		{q{const(char)*}, q{LLVMGetDebugLocDirectory}, q{LLVMValueRef val, uint* length}},
		{q{const(char)*}, q{LLVMGetDebugLocFilename}, q{LLVMValueRef val, uint* length}},
		{q{uint}, q{LLVMGetDebugLocLine}, q{LLVMValueRef val}},
		{q{uint}, q{LLVMGetDebugLocColumn}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMAddFunction}, q{LLVMModuleRef m, const(char)* name, LLVMTypeRef functionTy}},
		{q{LLVMValueRef}, q{LLVMGetNamedFunction}, q{LLVMModuleRef m, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMGetFirstFunction}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetLastFunction}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetNextFunction}, q{LLVMValueRef fn}},
		{q{LLVMValueRef}, q{LLVMGetPreviousFunction}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMSetModuleInlineAsm}, q{LLVMModuleRef m, const(char)* asm_}},
		{q{LLVMTypeKind}, q{LLVMGetTypeKind}, q{LLVMTypeRef ty}},
		{q{LLVMBool}, q{LLVMTypeIsSized}, q{LLVMTypeRef ty}},
		{q{LLVMContextRef}, q{LLVMGetTypeContext}, q{LLVMTypeRef ty}},
		{q{void}, q{LLVMDumpType}, q{LLVMTypeRef val}},
		{q{char*}, q{LLVMPrintTypeToString}, q{LLVMTypeRef val}},
		{q{LLVMTypeRef}, q{LLVMInt1TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMInt8TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMInt16TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMInt32TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMInt64TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMInt128TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMIntTypeInContext}, q{LLVMContextRef c, uint numBits}},
		{q{LLVMTypeRef}, q{LLVMInt1Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMInt8Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMInt16Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMInt32Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMInt64Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMInt128Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMIntType}, q{uint numBits}},
		{q{uint}, q{LLVMGetIntTypeWidth}, q{LLVMTypeRef integerTy}},
		{q{LLVMTypeRef}, q{LLVMHalfTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMBFloatTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMFloatTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMDoubleTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMX86FP80TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMFP128TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMPPCFP128TypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMHalfType}, q{}},
		{q{LLVMTypeRef}, q{LLVMBFloatType}, q{}},
		{q{LLVMTypeRef}, q{LLVMFloatType}, q{}},
		{q{LLVMTypeRef}, q{LLVMDoubleType}, q{}},
		{q{LLVMTypeRef}, q{LLVMX86FP80Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMFP128Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMPPCFP128Type}, q{}},
		{q{LLVMTypeRef}, q{LLVMFunctionType}, q{LLVMTypeRef returnType, LLVMTypeRef* paramTypes, uint paramCount, LLVMBool isVarArg}},
		{q{LLVMBool}, q{LLVMIsFunctionVarArg}, q{LLVMTypeRef functionTy}},
		{q{LLVMTypeRef}, q{LLVMGetReturnType}, q{LLVMTypeRef functionTy}},
		{q{uint}, q{LLVMCountParamTypes}, q{LLVMTypeRef functionTy}},
		{q{void}, q{LLVMGetParamTypes}, q{LLVMTypeRef functionTy, LLVMTypeRef* dest}},
		{q{LLVMTypeRef}, q{LLVMStructTypeInContext}, q{LLVMContextRef c, LLVMTypeRef* elementTypes, uint elementCount, LLVMBool packed}},
		{q{LLVMTypeRef}, q{LLVMStructType}, q{LLVMTypeRef* elementTypes, uint elementCount, LLVMBool packed}},
		{q{LLVMTypeRef}, q{LLVMStructCreateNamed}, q{LLVMContextRef c, const(char)* name}},
		{q{const(char)*}, q{LLVMGetStructName}, q{LLVMTypeRef ty}},
		{q{void}, q{LLVMStructSetBody}, q{LLVMTypeRef structTy, LLVMTypeRef* elementTypes, uint elementCount, LLVMBool packed}},
		{q{uint}, q{LLVMCountStructElementTypes}, q{LLVMTypeRef structTy}},
		{q{void}, q{LLVMGetStructElementTypes}, q{LLVMTypeRef structTy, LLVMTypeRef* dest}},
		{q{LLVMTypeRef}, q{LLVMStructGetTypeAtIndex}, q{LLVMTypeRef structTy, uint i}},
		{q{LLVMBool}, q{LLVMIsPackedStruct}, q{LLVMTypeRef structTy}},
		{q{LLVMBool}, q{LLVMIsOpaqueStruct}, q{LLVMTypeRef structTy}},
		{q{LLVMBool}, q{LLVMIsLiteralStruct}, q{LLVMTypeRef structTy}},
		{q{LLVMTypeRef}, q{LLVMGetElementType}, q{LLVMTypeRef ty}},
		{q{void}, q{LLVMGetSubtypes}, q{LLVMTypeRef tp, LLVMTypeRef* arr}},
		{q{uint}, q{LLVMGetNumContainedTypes}, q{LLVMTypeRef tp}},
		{q{LLVMTypeRef}, q{LLVMArrayType}, q{LLVMTypeRef elementType, uint elementCount}},
		{q{uint}, q{LLVMGetArrayLength}, q{LLVMTypeRef arrayTy}},
		{q{LLVMTypeRef}, q{LLVMPointerType}, q{LLVMTypeRef elementType, uint addressSpace}},
		{q{LLVMBool}, q{LLVMPointerTypeIsOpaque}, q{LLVMTypeRef ty}},
		{q{LLVMTypeRef}, q{LLVMPointerTypeInContext}, q{LLVMContextRef c, uint addressSpace}},
		{q{uint}, q{LLVMGetPointerAddressSpace}, q{LLVMTypeRef pointerTy}},
		{q{LLVMTypeRef}, q{LLVMVectorType}, q{LLVMTypeRef elementType, uint elementCount}},
		{q{LLVMTypeRef}, q{LLVMScalableVectorType}, q{LLVMTypeRef elementType, uint elementCount}},
		{q{uint}, q{LLVMGetVectorSize}, q{LLVMTypeRef vectorTy}},
		{q{LLVMTypeRef}, q{LLVMVoidTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMLabelTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMX86MMXTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMX86AMXTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMTokenTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMMetadataTypeInContext}, q{LLVMContextRef c}},
		{q{LLVMTypeRef}, q{LLVMVoidType}, q{}},
		{q{LLVMTypeRef}, q{LLVMLabelType}, q{}},
		{q{LLVMTypeRef}, q{LLVMX86MMXType}, q{}},
		{q{LLVMTypeRef}, q{LLVMX86AMXType}, q{}},
		{q{LLVMTypeRef}, q{LLVMTargetExtTypeInContext}, q{LLVMContextRef c, const(char)* name, LLVMTypeRef* typeParams, uint typeParamCount, uint* intParams, uint intParamCount}},
		{q{LLVMValueRef}, q{LLVMIsAArgument}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsABasicBlock}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAInlineAsm}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUser}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstant}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsABlockAddress}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantAggregateZero}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantArray}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantDataSequential}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantDataArray}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantDataVector}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantExpr}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantFP}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantInt}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantPointerNull}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantStruct}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantTokenNone}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAConstantVector}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGlobalValue}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGlobalAlias}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGlobalObject}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFunction}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGlobalVariable}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGlobalIFunc}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUndefValue}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAPoisonValue}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAInstruction}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUnaryOperator}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsABinaryOperator}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACallInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAIntrinsicInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsADbgInfoIntrinsic}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsADbgVariableIntrinsic}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsADbgDeclareInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsADbgLabelInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMemIntrinsic}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMemCpyInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMemMoveInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMemSetInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACmpInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFCmpInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAICmpInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAExtractElementInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAGetElementPtrInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAInsertElementInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAInsertValueInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsALandingPadInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAPHINode}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsASelectInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAShuffleVectorInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAStoreInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsABranchInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAIndirectBrInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAInvokeInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAReturnInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsASwitchInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUnreachableInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAResumeInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACleanupReturnInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACatchReturnInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACatchSwitchInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACallBrInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFuncletPadInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACatchPadInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACleanupPadInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUnaryInstruction}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAAllocaInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsACastInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAAddrSpaceCastInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsABitCastInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFPExtInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFPToSIInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFPToUIInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFPTruncInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAIntToPtrInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAPtrToIntInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsASExtInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsASIToFPInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsATruncInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAUIToFPInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAZExtInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAExtractValueInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsALoadInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAVAArgInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFreezeInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAAtomicCmpXchgInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAAtomicRMWInst}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAFenceInst}, q{LLVMValueRef val}},
		{q{LLVMTypeRef}, q{LLVMTypeOf}, q{LLVMValueRef val}},
		{q{LLVMValueKind}, q{LLVMGetValueKind}, q{LLVMValueRef val}},
		{q{const(char)*}, q{LLVMGetValueName2}, q{LLVMValueRef val, size_t* length}},
		{q{void}, q{LLVMSetValueName2}, q{LLVMValueRef val, const(char)* name, size_t nameLen}},
		{q{void}, q{LLVMDumpValue}, q{LLVMValueRef val}},
		{q{char*}, q{LLVMPrintValueToString}, q{LLVMValueRef val}},
		{q{void}, q{LLVMReplaceAllUsesWith}, q{LLVMValueRef oldVal, LLVMValueRef newVal}},
		{q{LLVMBool}, q{LLVMIsConstant}, q{LLVMValueRef val}},
		{q{LLVMBool}, q{LLVMIsUndef}, q{LLVMValueRef val}},
		{q{LLVMBool}, q{LLVMIsPoison}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMDNode}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMIsAMDString}, q{LLVMValueRef val}},
		{q{const(char)*}, q{LLVMGetValueName}, q{LLVMValueRef val}},
		{q{void}, q{LLVMSetValueName}, q{LLVMValueRef val, const(char)* name}},
		{q{LLVMUseRef}, q{LLVMGetFirstUse}, q{LLVMValueRef val}},
		{q{LLVMUseRef}, q{LLVMGetNextUse}, q{LLVMUseRef u}},
		{q{LLVMValueRef}, q{LLVMGetUser}, q{LLVMUseRef u}},
		{q{LLVMValueRef}, q{LLVMGetUsedValue}, q{LLVMUseRef u}},
		{q{LLVMValueRef}, q{LLVMGetOperand}, q{LLVMValueRef val, uint index}},
		{q{LLVMUseRef}, q{LLVMGetOperandUse}, q{LLVMValueRef val, uint index}},
		{q{void}, q{LLVMSetOperand}, q{LLVMValueRef user, uint index, LLVMValueRef val}},
		{q{int}, q{LLVMGetNumOperands}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMConstNull}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMConstAllOnes}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMGetUndef}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMGetPoison}, q{LLVMTypeRef ty}},
		{q{LLVMBool}, q{LLVMIsNull}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMConstPointerNull}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMConstInt}, q{LLVMTypeRef intTy, ulong n, LLVMBool signExtend}},
		{q{LLVMValueRef}, q{LLVMConstIntOfArbitraryPrecision}, q{LLVMTypeRef intTy, uint numWords, const(ulong)* words}},
		{q{LLVMValueRef}, q{LLVMConstIntOfString}, q{LLVMTypeRef intTy, const(char)* text, ubyte radix}},
		{q{LLVMValueRef}, q{LLVMConstIntOfStringAndSize}, q{LLVMTypeRef intTy, const(char)* text, uint slen, ubyte radix}},
		{q{LLVMValueRef}, q{LLVMConstReal}, q{LLVMTypeRef realTy, double n}},
		{q{LLVMValueRef}, q{LLVMConstRealOfString}, q{LLVMTypeRef realTy, const(char)* text}},
		{q{LLVMValueRef}, q{LLVMConstRealOfStringAndSize}, q{LLVMTypeRef realTy, const(char)* text, uint slen}},
		{q{ulong}, q{LLVMConstIntGetZExtValue}, q{LLVMValueRef constantVal}},
		{q{long}, q{LLVMConstIntGetSExtValue}, q{LLVMValueRef constantVal}},
		{q{double}, q{LLVMConstRealGetDouble}, q{LLVMValueRef constantVal, LLVMBool* losesInfo}},
		{q{LLVMValueRef}, q{LLVMConstStringInContext}, q{LLVMContextRef c, const(char)* str, uint length, LLVMBool dontNullTerminate}},
		{q{LLVMValueRef}, q{LLVMConstString}, q{const(char)* str, uint length, LLVMBool dontNullTerminate}},
		{q{LLVMBool}, q{LLVMIsConstantString}, q{LLVMValueRef c}},
		{q{const(char)*}, q{LLVMGetAsString}, q{LLVMValueRef c, size_t* length}},
		{q{LLVMValueRef}, q{LLVMConstStructInContext}, q{LLVMContextRef c, LLVMValueRef* constantVals, uint count, LLVMBool packed}},
		{q{LLVMValueRef}, q{LLVMConstStruct}, q{LLVMValueRef* constantVals, uint count, LLVMBool packed}},
		{q{LLVMValueRef}, q{LLVMConstArray}, q{LLVMTypeRef elementTy, LLVMValueRef* constantVals, uint length}},
		{q{LLVMValueRef}, q{LLVMConstNamedStruct}, q{LLVMTypeRef structTy, LLVMValueRef* constantVals, uint count}},
		{q{LLVMValueRef}, q{LLVMGetAggregateElement}, q{LLVMValueRef c, uint idx}},
		{q{LLVMValueRef}, q{LLVMConstVector}, q{LLVMValueRef* scalarConstantVals, uint size}},
		{q{LLVMOpcode}, q{LLVMGetConstOpcode}, q{LLVMValueRef constantVal}},
		{q{LLVMValueRef}, q{LLVMAlignOf}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMSizeOf}, q{LLVMTypeRef ty}},
		{q{LLVMValueRef}, q{LLVMConstNeg}, q{LLVMValueRef constantVal}},
		{q{LLVMValueRef}, q{LLVMConstNSWNeg}, q{LLVMValueRef constantVal}},
		{q{LLVMValueRef}, q{LLVMConstNUWNeg}, q{LLVMValueRef constantVal}},
		{q{LLVMValueRef}, q{LLVMConstNot}, q{LLVMValueRef constantVal}},
		{q{LLVMValueRef}, q{LLVMConstAdd}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNSWAdd}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNUWAdd}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstSub}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNSWSub}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNUWSub}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstMul}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNSWMul}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstNUWMul}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstAnd}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstOr}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstXor}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstICmp}, q{LLVMIntPredicate predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstFCmp}, q{LLVMRealPredicate predicate, LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstShl}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstLShr}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstAShr}, q{LLVMValueRef lhsConstant, LLVMValueRef rhsConstant}},
		{q{LLVMValueRef}, q{LLVMConstGEP2}, q{LLVMTypeRef ty, LLVMValueRef constantVal, LLVMValueRef* constantIndices, uint numIndices}},
		{q{LLVMValueRef}, q{LLVMConstInBoundsGEP2}, q{LLVMTypeRef ty, LLVMValueRef constantVal, LLVMValueRef* constantIndices, uint numIndices}},
		{q{LLVMValueRef}, q{LLVMConstTrunc}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstSExt}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstZExt}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstFPTrunc}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstFPExt}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstUIToFP}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstSIToFP}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstFPToUI}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstFPToSI}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstPtrToInt}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstIntToPtr}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstBitCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstAddrSpaceCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstZExtOrBitCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstSExtOrBitCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstTruncOrBitCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstPointerCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstIntCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType, LLVMBool isSigned}},
		{q{LLVMValueRef}, q{LLVMConstFPCast}, q{LLVMValueRef constantVal, LLVMTypeRef toType}},
		{q{LLVMValueRef}, q{LLVMConstSelect}, q{LLVMValueRef constantCondition, LLVMValueRef constantIfTrue, LLVMValueRef constantIfFalse}},
		{q{LLVMValueRef}, q{LLVMConstExtractElement}, q{LLVMValueRef vectorConstant, LLVMValueRef indexConstant}},
		{q{LLVMValueRef}, q{LLVMConstInsertElement}, q{LLVMValueRef vectorConstant, LLVMValueRef elementValueConstant, LLVMValueRef indexConstant}},
		{q{LLVMValueRef}, q{LLVMConstShuffleVector}, q{LLVMValueRef vectorAConstant, LLVMValueRef vectorBConstant, LLVMValueRef maskConstant}},
		{q{LLVMValueRef}, q{LLVMBlockAddress}, q{LLVMValueRef f, LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMConstInlineAsm}, q{LLVMTypeRef ty, const(char)* asmString, const(char)* constraints, LLVMBool hasSideEffects, LLVMBool isAlignStack}},
		{q{LLVMModuleRef}, q{LLVMGetGlobalParent}, q{LLVMValueRef global}},
		{q{LLVMBool}, q{LLVMIsDeclaration}, q{LLVMValueRef global}},
		{q{LLVMLinkage}, q{LLVMGetLinkage}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetLinkage}, q{LLVMValueRef global, LLVMLinkage linkage}},
		{q{const(char)*}, q{LLVMGetSection}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetSection}, q{LLVMValueRef global, const(char)* section}},
		{q{LLVMVisibility}, q{LLVMGetVisibility}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetVisibility}, q{LLVMValueRef global, LLVMVisibility vis}},
		{q{LLVMDLLStorageClass}, q{LLVMGetDLLStorageClass}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetDLLStorageClass}, q{LLVMValueRef global, LLVMDLLStorageClass class_}},
		{q{LLVMUnnamedAddr}, q{LLVMGetUnnamedAddress}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetUnnamedAddress}, q{LLVMValueRef global, LLVMUnnamedAddr unnamedAddr}},
		{q{LLVMTypeRef}, q{LLVMGlobalGetValueType}, q{LLVMValueRef global}},
		{q{LLVMBool}, q{LLVMHasUnnamedAddr}, q{LLVMValueRef global}},
		{q{void}, q{LLVMSetUnnamedAddr}, q{LLVMValueRef global, LLVMBool hasUnnamedAddr}},
		{q{uint}, q{LLVMGetAlignment}, q{LLVMValueRef v}},
		{q{void}, q{LLVMSetAlignment}, q{LLVMValueRef v, uint bytes}},
		{q{void}, q{LLVMGlobalSetMetadata}, q{LLVMValueRef global, uint kind, LLVMMetadataRef md}},
		{q{void}, q{LLVMGlobalEraseMetadata}, q{LLVMValueRef global, uint kind}},
		{q{void}, q{LLVMGlobalClearMetadata}, q{LLVMValueRef global}},
		{q{LLVMValueMetadataEntry*}, q{LLVMGlobalCopyAllMetadata}, q{LLVMValueRef value, size_t* numEntries}},
		{q{void}, q{LLVMDisposeValueMetadataEntries}, q{LLVMValueMetadataEntry* entries}},
		{q{uint}, q{LLVMValueMetadataEntriesGetKind}, q{LLVMValueMetadataEntry* entries, uint index}},
		{q{LLVMMetadataRef}, q{LLVMValueMetadataEntriesGetMetadata}, q{LLVMValueMetadataEntry* entries, uint index}},
		{q{LLVMValueRef}, q{LLVMAddGlobal}, q{LLVMModuleRef m, LLVMTypeRef ty, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMAddGlobalInAddressSpace}, q{LLVMModuleRef m, LLVMTypeRef ty, const(char)* name, uint addressSpace}},
		{q{LLVMValueRef}, q{LLVMGetNamedGlobal}, q{LLVMModuleRef m, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMGetFirstGlobal}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetLastGlobal}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetNextGlobal}, q{LLVMValueRef globalVar}},
		{q{LLVMValueRef}, q{LLVMGetPreviousGlobal}, q{LLVMValueRef globalVar}},
		{q{void}, q{LLVMDeleteGlobal}, q{LLVMValueRef globalVar}},
		{q{LLVMValueRef}, q{LLVMGetInitializer}, q{LLVMValueRef globalVar}, aliases: [q{LLVMGetInitialiser}]},
		{q{void}, q{LLVMSetInitializer}, q{LLVMValueRef globalVar, LLVMValueRef constantVal}, aliases: [q{LLVMSetInitialiser}]},
		{q{LLVMBool}, q{LLVMIsThreadLocal}, q{LLVMValueRef globalVar}},
		{q{void}, q{LLVMSetThreadLocal}, q{LLVMValueRef globalVar, LLVMBool isThreadLocal}},
		{q{LLVMBool}, q{LLVMIsGlobalConstant}, q{LLVMValueRef globalVar}},
		{q{void}, q{LLVMSetGlobalConstant}, q{LLVMValueRef globalVar, LLVMBool isConstant}},
		{q{LLVMThreadLocalMode}, q{LLVMGetThreadLocalMode}, q{LLVMValueRef globalVar}},
		{q{void}, q{LLVMSetThreadLocalMode}, q{LLVMValueRef globalVar, LLVMThreadLocalMode mode}},
		{q{LLVMBool}, q{LLVMIsExternallyInitialized}, q{LLVMValueRef globalVar}, aliases: [q{LLVMIsExternallyInitialised}]},
		{q{void}, q{LLVMSetExternallyInitialized}, q{LLVMValueRef globalVar, LLVMBool isExtInit}, aliases: [q{LLVMSetExternallyInitialised}]},
		{q{LLVMValueRef}, q{LLVMAddAlias2}, q{LLVMModuleRef m, LLVMTypeRef valueTy, uint addrSpace, LLVMValueRef aliasee, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMGetNamedGlobalAlias}, q{LLVMModuleRef m, const(char)* name, size_t nameLen}},
		{q{LLVMValueRef}, q{LLVMGetFirstGlobalAlias}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetLastGlobalAlias}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetNextGlobalAlias}, q{LLVMValueRef ga}},
		{q{LLVMValueRef}, q{LLVMGetPreviousGlobalAlias}, q{LLVMValueRef ga}},
		{q{LLVMValueRef}, q{LLVMAliasGetAliasee}, q{LLVMValueRef alias_}},
		{q{void}, q{LLVMAliasSetAliasee}, q{LLVMValueRef alias_, LLVMValueRef aliasee}},
		{q{void}, q{LLVMDeleteFunction}, q{LLVMValueRef fn}},
		{q{LLVMBool}, q{LLVMHasPersonalityFn}, q{LLVMValueRef fn}},
		{q{LLVMValueRef}, q{LLVMGetPersonalityFn}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMSetPersonalityFn}, q{LLVMValueRef fn, LLVMValueRef personalityFn}},
		{q{uint}, q{LLVMLookupIntrinsicID}, q{const(char)* name, size_t nameLen}},
		{q{uint}, q{LLVMGetIntrinsicID}, q{LLVMValueRef fn}},
		{q{LLVMValueRef}, q{LLVMGetIntrinsicDeclaration}, q{LLVMModuleRef mod, uint id, LLVMTypeRef* paramTypes, size_t paramCount}},
		{q{LLVMTypeRef}, q{LLVMIntrinsicGetType}, q{LLVMContextRef ctx, uint id, LLVMTypeRef* paramTypes, size_t paramCount}},
		{q{const(char)*}, q{LLVMIntrinsicGetName}, q{uint id, size_t* nameLength}},
		{q{const(char)*}, q{LLVMIntrinsicCopyOverloadedName}, q{uint id, LLVMTypeRef* paramTypes, size_t paramCount, size_t* nameLength}},
		{q{const(char)*}, q{LLVMIntrinsicCopyOverloadedName2}, q{LLVMModuleRef mod, uint id, LLVMTypeRef* paramTypes, size_t paramCount, size_t* nameLength}},
		{q{LLVMBool}, q{LLVMIntrinsicIsOverloaded}, q{uint id}},
		{q{uint}, q{LLVMGetFunctionCallConv}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMSetFunctionCallConv}, q{LLVMValueRef fn, uint cc}},
		{q{const(char)*}, q{LLVMGetGC}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMSetGC}, q{LLVMValueRef fn, const(char)* name}},
		{q{void}, q{LLVMAddAttributeAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, LLVMAttributeRef a}},
		{q{uint}, q{LLVMGetAttributeCountAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx}},
		{q{void}, q{LLVMGetAttributesAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, LLVMAttributeRef* attrs}},
		{q{LLVMAttributeRef}, q{LLVMGetEnumAttributeAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, uint kindID}},
		{q{LLVMAttributeRef}, q{LLVMGetStringAttributeAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, const(char)* k, uint klen}},
		{q{void}, q{LLVMRemoveEnumAttributeAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, uint kindID}},
		{q{void}, q{LLVMRemoveStringAttributeAtIndex}, q{LLVMValueRef f, LLVMAttributeIndex idx, const(char)* k, uint klen}},
		{q{void}, q{LLVMAddTargetDependentFunctionAttr}, q{LLVMValueRef fn, const(char)* a, const(char)* v}},
		{q{uint}, q{LLVMCountParams}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMGetParams}, q{LLVMValueRef fn, LLVMValueRef* params}},
		{q{LLVMValueRef}, q{LLVMGetParam}, q{LLVMValueRef fn, uint index}},
		{q{LLVMValueRef}, q{LLVMGetParamParent}, q{LLVMValueRef inst}},
		{q{LLVMValueRef}, q{LLVMGetFirstParam}, q{LLVMValueRef fn}},
		{q{LLVMValueRef}, q{LLVMGetLastParam}, q{LLVMValueRef fn}},
		{q{LLVMValueRef}, q{LLVMGetNextParam}, q{LLVMValueRef arg}},
		{q{LLVMValueRef}, q{LLVMGetPreviousParam}, q{LLVMValueRef arg}},
		{q{void}, q{LLVMSetParamAlignment}, q{LLVMValueRef arg, uint align_}},
		{q{LLVMValueRef}, q{LLVMAddGlobalIFunc}, q{LLVMModuleRef m, const(char)* name, size_t nameLen, LLVMTypeRef ty, uint addrSpace, LLVMValueRef resolver}},
		{q{LLVMValueRef}, q{LLVMGetNamedGlobalIFunc}, q{LLVMModuleRef m, const(char)* name, size_t nameLen}},
		{q{LLVMValueRef}, q{LLVMGetFirstGlobalIFunc}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetLastGlobalIFunc}, q{LLVMModuleRef m}},
		{q{LLVMValueRef}, q{LLVMGetNextGlobalIFunc}, q{LLVMValueRef ifunc}},
		{q{LLVMValueRef}, q{LLVMGetPreviousGlobalIFunc}, q{LLVMValueRef ifunc}},
		{q{LLVMValueRef}, q{LLVMGetGlobalIFuncResolver}, q{LLVMValueRef ifunc}},
		{q{void}, q{LLVMSetGlobalIFuncResolver}, q{LLVMValueRef ifunc, LLVMValueRef resolver}},
		{q{void}, q{LLVMEraseGlobalIFunc}, q{LLVMValueRef ifunc}},
		{q{void}, q{LLVMRemoveGlobalIFunc}, q{LLVMValueRef ifunc}},
		{q{LLVMMetadataRef}, q{LLVMMDStringInContext2}, q{LLVMContextRef c, const(char)* str, size_t slen}},
		{q{LLVMMetadataRef}, q{LLVMMDNodeInContext2}, q{LLVMContextRef c, LLVMMetadataRef* mds, size_t count}},
		{q{LLVMValueRef}, q{LLVMMetadataAsValue}, q{LLVMContextRef c, LLVMMetadataRef md}},
		{q{LLVMMetadataRef}, q{LLVMValueAsMetadata}, q{LLVMValueRef val}},
		{q{const(char)*}, q{LLVMGetMDString}, q{LLVMValueRef v, uint* length}},
		{q{uint}, q{LLVMGetMDNodeNumOperands}, q{LLVMValueRef v}},
		{q{void}, q{LLVMGetMDNodeOperands}, q{LLVMValueRef v, LLVMValueRef* dest}},
		{q{LLVMValueRef}, q{LLVMMDStringInContext}, q{LLVMContextRef c, const(char)* str, uint slen}},
		{q{LLVMValueRef}, q{LLVMMDString}, q{const(char)* str, uint slen}},
		{q{LLVMValueRef}, q{LLVMMDNodeInContext}, q{LLVMContextRef c, LLVMValueRef* vals, uint count}},
		{q{LLVMValueRef}, q{LLVMMDNode}, q{LLVMValueRef* vals, uint count}},
		{q{LLVMValueRef}, q{LLVMBasicBlockAsValue}, q{LLVMBasicBlockRef bb}},
		{q{LLVMBool}, q{LLVMValueIsBasicBlock}, q{LLVMValueRef val}},
		{q{LLVMBasicBlockRef}, q{LLVMValueAsBasicBlock}, q{LLVMValueRef val}},
		{q{const(char)*}, q{LLVMGetBasicBlockName}, q{LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMGetBasicBlockParent}, q{LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMGetBasicBlockTerminator}, q{LLVMBasicBlockRef bb}},
		{q{uint}, q{LLVMCountBasicBlocks}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMGetBasicBlocks}, q{LLVMValueRef fn, LLVMBasicBlockRef* basicBlocks}},
		{q{LLVMBasicBlockRef}, q{LLVMGetFirstBasicBlock}, q{LLVMValueRef fn}},
		{q{LLVMBasicBlockRef}, q{LLVMGetLastBasicBlock}, q{LLVMValueRef fn}},
		{q{LLVMBasicBlockRef}, q{LLVMGetNextBasicBlock}, q{LLVMBasicBlockRef bb}},
		{q{LLVMBasicBlockRef}, q{LLVMGetPreviousBasicBlock}, q{LLVMBasicBlockRef bb}},
		{q{LLVMBasicBlockRef}, q{LLVMGetEntryBasicBlock}, q{LLVMValueRef fn}},
		{q{void}, q{LLVMInsertExistingBasicBlockAfterInsertBlock}, q{LLVMBuilderRef builder, LLVMBasicBlockRef bb}},
		{q{void}, q{LLVMAppendExistingBasicBlock}, q{LLVMValueRef fn, LLVMBasicBlockRef bb}},
		{q{LLVMBasicBlockRef}, q{LLVMCreateBasicBlockInContext}, q{LLVMContextRef c, const(char)* name}},
		{q{LLVMBasicBlockRef}, q{LLVMAppendBasicBlockInContext}, q{LLVMContextRef c, LLVMValueRef fn, const(char)* name}},
		{q{LLVMBasicBlockRef}, q{LLVMAppendBasicBlock}, q{LLVMValueRef fn, const(char)* name}},
		{q{LLVMBasicBlockRef}, q{LLVMInsertBasicBlockInContext}, q{LLVMContextRef c, LLVMBasicBlockRef bb, const(char)* name}},
		{q{LLVMBasicBlockRef}, q{LLVMInsertBasicBlock}, q{LLVMBasicBlockRef insertBeforeBB, const(char)* name}},
		{q{void}, q{LLVMDeleteBasicBlock}, q{LLVMBasicBlockRef bb}},
		{q{void}, q{LLVMRemoveBasicBlockFromParent}, q{LLVMBasicBlockRef bb}},
		{q{void}, q{LLVMMoveBasicBlockBefore}, q{LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos}},
		{q{void}, q{LLVMMoveBasicBlockAfter}, q{LLVMBasicBlockRef bb, LLVMBasicBlockRef movePos}},
		{q{LLVMValueRef}, q{LLVMGetFirstInstruction}, q{LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMGetLastInstruction}, q{LLVMBasicBlockRef bb}},
		{q{int}, q{LLVMHasMetadata}, q{LLVMValueRef val}},
		{q{LLVMValueRef}, q{LLVMGetMetadata}, q{LLVMValueRef val, uint kindID}},
		{q{void}, q{LLVMSetMetadata}, q{LLVMValueRef val, uint kindID, LLVMValueRef node}},
		{q{LLVMValueMetadataEntry*}, q{LLVMInstructionGetAllMetadataOtherThanDebugLoc}, q{LLVMValueRef instr, size_t* numEntries}},
		{q{LLVMBasicBlockRef}, q{LLVMGetInstructionParent}, q{LLVMValueRef inst}},
		{q{LLVMValueRef}, q{LLVMGetNextInstruction}, q{LLVMValueRef inst}},
		{q{LLVMValueRef}, q{LLVMGetPreviousInstruction}, q{LLVMValueRef inst}},
		{q{void}, q{LLVMInstructionRemoveFromParent}, q{LLVMValueRef inst}},
		{q{void}, q{LLVMInstructionEraseFromParent}, q{LLVMValueRef inst}},
		{q{void}, q{LLVMDeleteInstruction}, q{LLVMValueRef inst}},
		{q{LLVMOpcode}, q{LLVMGetInstructionOpcode}, q{LLVMValueRef inst}},
		{q{LLVMIntPredicate}, q{LLVMGetICmpPredicate}, q{LLVMValueRef inst}},
		{q{LLVMRealPredicate}, q{LLVMGetFCmpPredicate}, q{LLVMValueRef inst}},
		{q{LLVMValueRef}, q{LLVMInstructionClone}, q{LLVMValueRef inst}},
		{q{LLVMValueRef}, q{LLVMIsATerminatorInst}, q{LLVMValueRef inst}},
		{q{uint}, q{LLVMGetNumArgOperands}, q{LLVMValueRef instr}},
		{q{void}, q{LLVMSetInstructionCallConv}, q{LLVMValueRef instr, uint cc}},
		{q{uint}, q{LLVMGetInstructionCallConv}, q{LLVMValueRef instr}},
		{q{void}, q{LLVMSetInstrParamAlignment}, q{LLVMValueRef instr, LLVMAttributeIndex idx, uint align_}},
		{q{void}, q{LLVMAddCallSiteAttribute}, q{LLVMValueRef c, LLVMAttributeIndex idx, LLVMAttributeRef a}},
		{q{uint}, q{LLVMGetCallSiteAttributeCount}, q{LLVMValueRef c, LLVMAttributeIndex idx}},
		{q{void}, q{LLVMGetCallSiteAttributes}, q{LLVMValueRef c, LLVMAttributeIndex idx, LLVMAttributeRef* attrs}},
		{q{LLVMAttributeRef}, q{LLVMGetCallSiteEnumAttribute}, q{LLVMValueRef c, LLVMAttributeIndex idx, uint kindID}},
		{q{LLVMAttributeRef}, q{LLVMGetCallSiteStringAttribute}, q{LLVMValueRef c, LLVMAttributeIndex idx, const(char)* k, uint klen}},
		{q{void}, q{LLVMRemoveCallSiteEnumAttribute}, q{LLVMValueRef c, LLVMAttributeIndex idx, uint kindID}},
		{q{void}, q{LLVMRemoveCallSiteStringAttribute}, q{LLVMValueRef c, LLVMAttributeIndex idx, const(char)* k, uint klen}},
		{q{LLVMTypeRef}, q{LLVMGetCalledFunctionType}, q{LLVMValueRef c}},
		{q{LLVMValueRef}, q{LLVMGetCalledValue}, q{LLVMValueRef instr}},
		{q{LLVMBool}, q{LLVMIsTailCall}, q{LLVMValueRef callInst}},
		{q{void}, q{LLVMSetTailCall}, q{LLVMValueRef callInst, LLVMBool isTailCall}},
		{q{LLVMBasicBlockRef}, q{LLVMGetNormalDest}, q{LLVMValueRef invokeInst}},
		{q{LLVMBasicBlockRef}, q{LLVMGetUnwindDest}, q{LLVMValueRef invokeInst}},
		{q{void}, q{LLVMSetNormalDest}, q{LLVMValueRef invokeInst, LLVMBasicBlockRef b}},
		{q{void}, q{LLVMSetUnwindDest}, q{LLVMValueRef invokeInst, LLVMBasicBlockRef b}},
		{q{uint}, q{LLVMGetNumSuccessors}, q{LLVMValueRef term}},
		{q{LLVMBasicBlockRef}, q{LLVMGetSuccessor}, q{LLVMValueRef term, uint i}},
		{q{void}, q{LLVMSetSuccessor}, q{LLVMValueRef term, uint i, LLVMBasicBlockRef block}},
		{q{LLVMBool}, q{LLVMIsConditional}, q{LLVMValueRef branch}},
		{q{LLVMValueRef}, q{LLVMGetCondition}, q{LLVMValueRef branch}},
		{q{void}, q{LLVMSetCondition}, q{LLVMValueRef branch, LLVMValueRef cond}},
		{q{LLVMBasicBlockRef}, q{LLVMGetSwitchDefaultDest}, q{LLVMValueRef switchInstr}},
		{q{LLVMTypeRef}, q{LLVMGetAllocatedType}, q{LLVMValueRef alloca}},
		{q{LLVMBool}, q{LLVMIsInBounds}, q{LLVMValueRef gep}},
		{q{void}, q{LLVMSetIsInBounds}, q{LLVMValueRef gep, LLVMBool inBounds}},
		{q{LLVMTypeRef}, q{LLVMGetGEPSourceElementType}, q{LLVMValueRef gep}},
		{q{void}, q{LLVMAddIncoming}, q{LLVMValueRef phiNode, LLVMValueRef* incomingValues, LLVMBasicBlockRef* incomingBlocks, uint count}},
		{q{uint}, q{LLVMCountIncoming}, q{LLVMValueRef phiNode}},
		{q{LLVMValueRef}, q{LLVMGetIncomingValue}, q{LLVMValueRef phiNode, uint index}},
		{q{LLVMBasicBlockRef}, q{LLVMGetIncomingBlock}, q{LLVMValueRef phiNode, uint index}},
		{q{uint}, q{LLVMGetNumIndices}, q{LLVMValueRef inst}},
		{q{const(uint)*}, q{LLVMGetIndices}, q{LLVMValueRef inst}},
		{q{LLVMBuilderRef}, q{LLVMCreateBuilderInContext}, q{LLVMContextRef c}},
		{q{LLVMBuilderRef}, q{LLVMCreateBuilder}, q{}},
		{q{void}, q{LLVMPositionBuilder}, q{LLVMBuilderRef builder, LLVMBasicBlockRef block, LLVMValueRef instr}},
		{q{void}, q{LLVMPositionBuilderBefore}, q{LLVMBuilderRef builder, LLVMValueRef instr}},
		{q{void}, q{LLVMPositionBuilderAtEnd}, q{LLVMBuilderRef builder, LLVMBasicBlockRef block}},
		{q{LLVMBasicBlockRef}, q{LLVMGetInsertBlock}, q{LLVMBuilderRef builder}},
		{q{void}, q{LLVMClearInsertionPosition}, q{LLVMBuilderRef builder}},
		{q{void}, q{LLVMInsertIntoBuilder}, q{LLVMBuilderRef builder, LLVMValueRef instr}},
		{q{void}, q{LLVMInsertIntoBuilderWithName}, q{LLVMBuilderRef builder, LLVMValueRef instr, const(char)* name}},
		{q{void}, q{LLVMDisposeBuilder}, q{LLVMBuilderRef builder}},
		{q{LLVMMetadataRef}, q{LLVMGetCurrentDebugLocation2}, q{LLVMBuilderRef builder}},
		{q{void}, q{LLVMSetCurrentDebugLocation2}, q{LLVMBuilderRef builder, LLVMMetadataRef loc}},
		{q{void}, q{LLVMSetInstDebugLocation}, q{LLVMBuilderRef builder, LLVMValueRef inst}},
		{q{void}, q{LLVMAddMetadataToInst}, q{LLVMBuilderRef builder, LLVMValueRef inst}},
		{q{LLVMMetadataRef}, q{LLVMBuilderGetDefaultFPMathTag}, q{LLVMBuilderRef builder}},
		{q{void}, q{LLVMBuilderSetDefaultFPMathTag}, q{LLVMBuilderRef builder, LLVMMetadataRef fpMathTag}},
		{q{void}, q{LLVMSetCurrentDebugLocation}, q{LLVMBuilderRef builder, LLVMValueRef l}},
		{q{LLVMValueRef}, q{LLVMGetCurrentDebugLocation}, q{LLVMBuilderRef builder}},
		{q{LLVMValueRef}, q{LLVMBuildRetVoid}, q{LLVMBuilderRef}},
		{q{LLVMValueRef}, q{LLVMBuildRet}, q{LLVMBuilderRef, LLVMValueRef v}},
		{q{LLVMValueRef}, q{LLVMBuildAggregateRet}, q{LLVMBuilderRef, LLVMValueRef* retVals, uint n}},
		{q{LLVMValueRef}, q{LLVMBuildBr}, q{LLVMBuilderRef, LLVMBasicBlockRef dest}},
		{q{LLVMValueRef}, q{LLVMBuildCondBr}, q{LLVMBuilderRef, LLVMValueRef if_, LLVMBasicBlockRef then, LLVMBasicBlockRef else_}},
		{q{LLVMValueRef}, q{LLVMBuildSwitch}, q{LLVMBuilderRef, LLVMValueRef v, LLVMBasicBlockRef else_, uint numCases}},
		{q{LLVMValueRef}, q{LLVMBuildIndirectBr}, q{LLVMBuilderRef b, LLVMValueRef addr, uint numDests}},
		{q{LLVMValueRef}, q{LLVMBuildInvoke2}, q{LLVMBuilderRef, LLVMTypeRef ty, LLVMValueRef fn, LLVMValueRef* args, uint numArgs, LLVMBasicBlockRef then, LLVMBasicBlockRef catch_, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildUnreachable}, q{LLVMBuilderRef}},
		{q{LLVMValueRef}, q{LLVMBuildResume}, q{LLVMBuilderRef b, LLVMValueRef exn}},
		{q{LLVMValueRef}, q{LLVMBuildLandingPad}, q{LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef persFn, uint numClauses, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildCleanupRet}, q{LLVMBuilderRef b, LLVMValueRef catchPad, LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMBuildCatchRet}, q{LLVMBuilderRef b, LLVMValueRef catchPad, LLVMBasicBlockRef bb}},
		{q{LLVMValueRef}, q{LLVMBuildCatchPad}, q{LLVMBuilderRef b, LLVMValueRef parentPad, LLVMValueRef* args, uint numArgs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildCleanupPad}, q{LLVMBuilderRef b, LLVMValueRef parentPad, LLVMValueRef* args, uint numArgs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildCatchSwitch}, q{LLVMBuilderRef b, LLVMValueRef parentPad, LLVMBasicBlockRef unwindBB, uint numHandlers, const(char)* name}},
		{q{void}, q{LLVMAddCase}, q{LLVMValueRef switch_, LLVMValueRef onVal, LLVMBasicBlockRef dest}},
		{q{void}, q{LLVMAddDestination}, q{LLVMValueRef indirectBr, LLVMBasicBlockRef dest}},
		{q{uint}, q{LLVMGetNumClauses}, q{LLVMValueRef landingPad}},
		{q{LLVMValueRef}, q{LLVMGetClause}, q{LLVMValueRef landingPad, uint idx}},
		{q{void}, q{LLVMAddClause}, q{LLVMValueRef landingPad, LLVMValueRef clauseVal}},
		{q{LLVMBool}, q{LLVMIsCleanup}, q{LLVMValueRef landingPad}},
		{q{void}, q{LLVMSetCleanup}, q{LLVMValueRef landingPad, LLVMBool val}},
		{q{void}, q{LLVMAddHandler}, q{LLVMValueRef catchSwitch, LLVMBasicBlockRef dest}},
		{q{uint}, q{LLVMGetNumHandlers}, q{LLVMValueRef catchSwitch}},
		{q{void}, q{LLVMGetHandlers}, q{LLVMValueRef catchSwitch, LLVMBasicBlockRef* handlers}},
		{q{LLVMValueRef}, q{LLVMGetArgOperand}, q{LLVMValueRef funclet, uint i}},
		{q{void}, q{LLVMSetArgOperand}, q{LLVMValueRef funclet, uint i, LLVMValueRef value}},
		{q{LLVMValueRef}, q{LLVMGetParentCatchSwitch}, q{LLVMValueRef catchPad}},
		{q{void}, q{LLVMSetParentCatchSwitch}, q{LLVMValueRef catchPad, LLVMValueRef catchSwitch}},
		{q{LLVMValueRef}, q{LLVMBuildAdd}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNSWAdd}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNUWAdd}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFAdd}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSub}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNSWSub}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNUWSub}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFSub}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildMul}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNSWMul}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNUWMul}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFMul}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildUDiv}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildExactUDiv}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSDiv}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildExactSDiv}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFDiv}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildURem}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSRem}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFRem}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildShl}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildLShr}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildAShr}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildAnd}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildOr}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildXor}, q{LLVMBuilderRef, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildBinOp}, q{LLVMBuilderRef b, LLVMOpcode op, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNeg}, q{LLVMBuilderRef, LLVMValueRef v, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNSWNeg}, q{LLVMBuilderRef b, LLVMValueRef v, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNUWNeg}, q{LLVMBuilderRef b, LLVMValueRef v, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFNeg}, q{LLVMBuilderRef, LLVMValueRef v, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildNot}, q{LLVMBuilderRef, LLVMValueRef v, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildMalloc}, q{LLVMBuilderRef, LLVMTypeRef ty, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildArrayMalloc}, q{LLVMBuilderRef, LLVMTypeRef ty, LLVMValueRef val, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildMemSet}, q{LLVMBuilderRef b, LLVMValueRef ptr, LLVMValueRef val, LLVMValueRef len, uint align_}},
		{q{LLVMValueRef}, q{LLVMBuildMemCpy}, q{LLVMBuilderRef b, LLVMValueRef dst, uint dstAlign, LLVMValueRef src, uint srcAlign, LLVMValueRef size}},
		{q{LLVMValueRef}, q{LLVMBuildMemMove}, q{LLVMBuilderRef b, LLVMValueRef dst, uint dstAlign, LLVMValueRef src, uint srcAlign, LLVMValueRef size}},
		{q{LLVMValueRef}, q{LLVMBuildAlloca}, q{LLVMBuilderRef, LLVMTypeRef ty, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildArrayAlloca}, q{LLVMBuilderRef, LLVMTypeRef ty, LLVMValueRef val, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFree}, q{LLVMBuilderRef, LLVMValueRef pointerVal}},
		{q{LLVMValueRef}, q{LLVMBuildLoad2}, q{LLVMBuilderRef, LLVMTypeRef ty, LLVMValueRef pointerVal, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildStore}, q{LLVMBuilderRef, LLVMValueRef val, LLVMValueRef ptr}},
		{q{LLVMValueRef}, q{LLVMBuildGEP2}, q{LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef pointer, LLVMValueRef* indices, uint numIndices, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildInBoundsGEP2}, q{LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef pointer, LLVMValueRef* indices, uint numIndices, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildStructGEP2}, q{LLVMBuilderRef b, LLVMTypeRef ty, LLVMValueRef pointer, uint idx, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildGlobalString}, q{LLVMBuilderRef b, const(char)* str, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildGlobalStringPtr}, q{LLVMBuilderRef b, const(char)* str, const(char)* name}},
		{q{LLVMBool}, q{LLVMGetVolatile}, q{LLVMValueRef memoryAccessInst}},
		{q{void}, q{LLVMSetVolatile}, q{LLVMValueRef memoryAccessInst, LLVMBool isVolatile}},
		{q{LLVMBool}, q{LLVMGetWeak}, q{LLVMValueRef cmpXchgInst}},
		{q{void}, q{LLVMSetWeak}, q{LLVMValueRef cmpXchgInst, LLVMBool isWeak}},
		{q{LLVMAtomicOrdering}, q{LLVMGetOrdering}, q{LLVMValueRef memoryAccessInst}},
		{q{void}, q{LLVMSetOrdering}, q{LLVMValueRef memoryAccessInst, LLVMAtomicOrdering ordering}},
		{q{LLVMAtomicRMWBinOp}, q{LLVMGetAtomicRMWBinOp}, q{LLVMValueRef atomicRMWInst}},
		{q{void}, q{LLVMSetAtomicRMWBinOp}, q{LLVMValueRef atomicRMWInst, LLVMAtomicRMWBinOp binOp}},
		{q{LLVMValueRef}, q{LLVMBuildTrunc}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildZExt}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSExt}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFPToUI}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFPToSI}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildUIToFP}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSIToFP}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFPTrunc}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFPExt}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildPtrToInt}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildIntToPtr}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildBitCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildAddrSpaceCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildZExtOrBitCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSExtOrBitCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildTruncOrBitCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildCast}, q{LLVMBuilderRef b, LLVMOpcode op, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildPointerCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildIntCast2}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, LLVMBool isSigned, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFPCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildIntCast}, q{LLVMBuilderRef, LLVMValueRef val, LLVMTypeRef destTy, const(char)* name}},
		{q{LLVMOpcode}, q{LLVMGetCastOpcode}, q{LLVMValueRef src, LLVMBool srcIsSigned, LLVMTypeRef destTy, LLVMBool destIsSigned}},
		{q{LLVMValueRef}, q{LLVMBuildICmp}, q{LLVMBuilderRef, LLVMIntPredicate op, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFCmp}, q{LLVMBuilderRef, LLVMRealPredicate op, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildPhi}, q{LLVMBuilderRef, LLVMTypeRef ty, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildCall2}, q{LLVMBuilderRef, LLVMTypeRef, LLVMValueRef fn, LLVMValueRef* args, uint numArgs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildSelect}, q{LLVMBuilderRef, LLVMValueRef if_, LLVMValueRef then, LLVMValueRef else_, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildVAArg}, q{LLVMBuilderRef, LLVMValueRef list, LLVMTypeRef ty, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildExtractElement}, q{LLVMBuilderRef, LLVMValueRef vecVal, LLVMValueRef index, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildInsertElement}, q{LLVMBuilderRef, LLVMValueRef vecVal, LLVMValueRef eltVal, LLVMValueRef index, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildShuffleVector}, q{LLVMBuilderRef, LLVMValueRef v1, LLVMValueRef v2, LLVMValueRef mask, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildExtractValue}, q{LLVMBuilderRef, LLVMValueRef aggVal, uint index, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildInsertValue}, q{LLVMBuilderRef, LLVMValueRef aggVal, LLVMValueRef eltVal, uint index, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFreeze}, q{LLVMBuilderRef, LLVMValueRef val, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildIsNull}, q{LLVMBuilderRef, LLVMValueRef val, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildIsNotNull}, q{LLVMBuilderRef, LLVMValueRef val, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildPtrDiff2}, q{LLVMBuilderRef, LLVMTypeRef elemTy, LLVMValueRef lhs, LLVMValueRef rhs, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildFence}, q{LLVMBuilderRef b, LLVMAtomicOrdering ordering, LLVMBool singleThread, const(char)* name}},
		{q{LLVMValueRef}, q{LLVMBuildAtomicRMW}, q{LLVMBuilderRef b, LLVMAtomicRMWBinOp op, LLVMValueRef ptr, LLVMValueRef val, LLVMAtomicOrdering ordering, LLVMBool singleThread}},
		{q{LLVMValueRef}, q{LLVMBuildAtomicCmpXchg}, q{LLVMBuilderRef b, LLVMValueRef ptr, LLVMValueRef cmp, LLVMValueRef new_, LLVMAtomicOrdering successOrdering, LLVMAtomicOrdering failureOrdering, LLVMBool singleThread}},
		{q{uint}, q{LLVMGetNumMaskElements}, q{LLVMValueRef shuffleVectorInst}},
		{q{int}, q{LLVMGetUndefMaskElem}, q{}},
		{q{int}, q{LLVMGetMaskValue}, q{LLVMValueRef shuffleVectorInst, uint elt}},
		{q{LLVMBool}, q{LLVMIsAtomicSingleThread}, q{LLVMValueRef atomicInst}},
		{q{void}, q{LLVMSetAtomicSingleThread}, q{LLVMValueRef atomicInst, LLVMBool singleThread}},
		{q{LLVMAtomicOrdering}, q{LLVMGetCmpXchgSuccessOrdering}, q{LLVMValueRef cmpXchgInst}},
		{q{void}, q{LLVMSetCmpXchgSuccessOrdering}, q{LLVMValueRef cmpXchgInst, LLVMAtomicOrdering ordering}},
		{q{LLVMAtomicOrdering}, q{LLVMGetCmpXchgFailureOrdering}, q{LLVMValueRef cmpXchgInst}},
		{q{void}, q{LLVMSetCmpXchgFailureOrdering}, q{LLVMValueRef cmpXchgInst, LLVMAtomicOrdering ordering}},
		{q{LLVMModuleProviderRef}, q{LLVMCreateModuleProviderForExistingModule}, q{LLVMModuleRef m}},
		{q{void}, q{LLVMDisposeModuleProvider}, q{LLVMModuleProviderRef m}},
		{q{LLVMBool}, q{LLVMCreateMemoryBufferWithContentsOfFile}, q{const(char)* path, LLVMMemoryBufferRef* outMemBuf, char** outMessage}},
		{q{LLVMBool}, q{LLVMCreateMemoryBufferWithSTDIN}, q{LLVMMemoryBufferRef* outMemBuf, char** outMessage}},
		{q{LLVMMemoryBufferRef}, q{LLVMCreateMemoryBufferWithMemoryRange}, q{const(char)* inputData, size_t inputDataLength, const(char)* bufferName, LLVMBool requiresNullTerminator}},
		{q{LLVMMemoryBufferRef}, q{LLVMCreateMemoryBufferWithMemoryRangeCopy}, q{const(char)* inputData, size_t inputDataLength, const(char)* bufferName}},
		{q{const(char)*}, q{LLVMGetBufferStart}, q{LLVMMemoryBufferRef memBuf}},
		{q{size_t}, q{LLVMGetBufferSize}, q{LLVMMemoryBufferRef memBuf}},
		{q{void}, q{LLVMDisposeMemoryBuffer}, q{LLVMMemoryBufferRef memBuf}},
		{q{LLVMPassRegistryRef}, q{LLVMGetGlobalPassRegistry}, q{}},
		{q{LLVMPassManagerRef}, q{LLVMCreatePassManager}, q{}},
		{q{LLVMPassManagerRef}, q{LLVMCreateFunctionPassManagerForModule}, q{LLVMModuleRef m}},
		{q{LLVMPassManagerRef}, q{LLVMCreateFunctionPassManager}, q{LLVMModuleProviderRef mp}},
		{q{LLVMBool}, q{LLVMRunPassManager}, q{LLVMPassManagerRef pm, LLVMModuleRef m}},
		{q{LLVMBool}, q{LLVMInitializeFunctionPassManager}, q{LLVMPassManagerRef fpm}, aliases: [q{LLVMInitialiseFunctionPassManager}]},
		{q{LLVMBool}, q{LLVMRunFunctionPassManager}, q{LLVMPassManagerRef fpm, LLVMValueRef f}},
		{q{LLVMBool}, q{LLVMFinalizeFunctionPassManager}, q{LLVMPassManagerRef fpm}, aliases: [q{LLVMFinaliseFunctionPassManager}]},
		{q{void}, q{LLVMDisposePassManager}, q{LLVMPassManagerRef pm}},
		{q{LLVMBool}, q{LLVMStartMultithreaded}, q{}},
		{q{void}, q{LLVMStopMultithreaded}, q{}},
		{q{LLVMBool}, q{LLVMIsMultithreaded}, q{}},
	];
	return ret;
}()));
